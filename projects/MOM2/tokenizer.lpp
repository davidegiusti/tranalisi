%option case-insensitive
%option nounput
%option noyywrap
%option reentrant
%option bison-bridge
%option bison-locations

 /* define status to avoid c++ comment */
%x COMMENT

 /* raw definitions */
DIGIT [0-9]
LETTER [a-z]
ALNUM [a-z0-9_]
SPACE [[:blank:]]
SIGN \+|\-
QUOTE \"|\'
ANY .
NEWLINE \n|\r
DOT \.

 /* more complicated */
WORD {LETTER}*
DOUBLE {SIGN}?({DIGIT}*{DOT}{DIGIT}+)|({DIGIT}+{DOT}{DIGIT}*)
INT {DIGIT}*
MANTISSA e({SIGN}?{INT})
SCI_DOUBLE ({DOUBLE}|{INT}){MANTISSA}

 /* comments */
BASH_COMM_BEG \#
BASH_COMM {BASH_COMM_BEG}{ANY}*
C_COMM_BEG \/\/
C_COMM {C_COMM_BEG}{ANY}*
CPP_COMM_BEG \/\*
CPP_COMM_END \*\/
CPP_COMM {CPP_COMM_BEG}(({ANY}-a)|{NEWLINE})*{CPP_COMM_END}

/* header of tokenizer */
%{

#include <cstdio>
#include <cstring>
#include <fstream>

#include <tranalisi.hpp>

#include <scan.hpp>

using namespace std;

#define DEBUG_PRINTF(...) if(debug_lexer) printf(__VA_ARGS__)

#define YY_INPUT(buf,result,max_size)					\
   {									\
       ifstream &fin=scan::fin;						\
       fin.get(*buf);							\
       if(not fin.good() or fin.eof())					\
	   result=YY_NULL;				                \
       else								\
	   result=1;							\
   }

 /* handle locations */
#define YY_USER_ACTION yylloc->first_line=yylloc->last_line=yylineno; \
    yylloc->first_column=yycolumn;yylloc->last_column=yycolumn+yyleng-1; \
    yycolumn+=yyleng;

#include "parser.hpp"
   
   const int debug_lexer=1;
%}

%%
 /* ignoring rules */
"/*"                                DEBUG_PRINTF("Entering c++-style comment\n");BEGIN(COMMENT);
<COMMENT>"/*"                       printf("warning: multiple comments opened at line: %d\n", yylineno);
<COMMENT>"*/"                       DEBUG_PRINTF("Exiting c++-style comment\n");BEGIN(INITIAL);
<COMMENT>"EOF"                      CRASH("reached end of file while scanning comment");
<COMMENT>"\n"                       yycolumn=1;yylineno++;
<COMMENT>{ANY}
{NEWLINE}                           DEBUG_PRINTF("Ignoring endline\n");yycolumn=1;yylineno++;
{BASH_COMM}                         DEBUG_PRINTF("Ignoring single line (bash) comment: %s\n",yytext);
{C_COMM}                            DEBUG_PRINTF("Ignoring single line (c) comment: %s\n",yytext);
{SPACE}+                            DEBUG_PRINTF("Ignoring spaces: \"%s\"\n",yytext);

Action                              DEBUG_PRINTF("Found Action\n");return TK_ACTION;
BC                                  DEBUG_PRINTF("Found BC\n");return TK_BC;
ChirExtrMethod                      DEBUG_PRINTF("Found ChirExtrMethod\n");return TK_CHIR_EXTR_METHOD;
ComputeMeslep                       DEBUG_PRINTF("Found ComputeMeslep\n");return TK_COMPUTE_MESLEP;
ComputeMeslepWithChargesOne         DEBUG_PRINTF("Found ComputeMeslepWithChargesOne\n");return TK_COMPUTE_MESLEP_WITH_CHARGES_ONE;
Ensembles                           DEBUG_PRINTF("Found Ensembles\n");return TK_ENSEMBLES;
FilterThresh                        DEBUG_PRINTF("Found FilterThresh\n");return TK_FILTER_THRESH;
NJacks                              DEBUG_PRINTF("Found NJacks\n");return TK_NJACKS;
NF                                  DEBUG_PRINTF("Found NF\n");return TK_NF;
PhysBasis                           DEBUG_PRINTF("Found PhysBasis\n");return TK_PHYS_BASIS;
PrintEachMom                        DEBUG_PRINTF("Found PrintEachMom\n");return TK_PRINT_EACH_MOM;
Scheme                              DEBUG_PRINTF("Found Scheme\n");return TK_SCHEME;
TwistedRun                          DEBUG_PRINTF("Found TwistedRun\n");return TK_TWISTED_RUN;
UseDeltamCrCt                       DEBUG_PRINTF("Found UseDeltamCrCt\n");return TK_USE_DELTAM_CR_CT;
UseDeltamTmCt                       DEBUG_PRINTF("Found UseDeltamTmCt\n");return TK_USE_DELTAM_TM_CT;
UseQED                              DEBUG_PRINTF("Found UseQED\n");return TK_USE_QED;

Average                             DEBUG_PRINTF("Found Average\n");return TK_AVERAGE;
AverageR                            DEBUG_PRINTF("Found AverageR\n");return TK_AVERAGE_R;
AverageEquivMomenta                 DEBUG_PRINTF("Found AverageEquivMomenta\n");return TK_AVERAGE_EQUIV_MOMENTA;
ComputeOrLoad                       DEBUG_PRINTF("Found ComputeOrLoad\n");return TK_COMPUTE_OR_LOAD;
Evolve                              DEBUG_PRINTF("Found Evolve\n");return TK_EVOLVE;
ListEnsembles                       DEBUG_PRINTF("Found ListEnsembles\n");return TK_LIST_ENSEMBLES;
PlotZ                               DEBUG_PRINTF("Found PlotZ\n");return TK_PLOT_Z;
PrintDiscr                          DEBUG_PRINTF("Found PrintDiscr\n");return TK_PRINT_DISCR;
RatioMinusOne                       DEBUG_PRINTF("Found RatioMinusOne\n");return TK_RATIO_MINUS_ONE;
SeaChirExtrap                       DEBUG_PRINTF("Found SeaChirExtrap\n");return TK_SEA_CHIR_EXTRAP;
SubtractOa2                         DEBUG_PRINTF("Found SubtractOa2\n");return TK_SUBTRACT_OA2;
ValChirExtrap                       DEBUG_PRINTF("Found ValChirExtrap\n");return TK_VAL_CHIR_EXTRAP;

=                                   return '=';
\(                                  return '(';
\)                                  return ')';
\{                                  return '{';
\}                                  return '}';
\,                                  return ',';
{DOT}                               return '.';

 /* true/false */
True DEBUG_PRINTF("Found True\n");yylval->inte=1;return TK_INTE;
False DEBUG_PRINTF("Found False\n");yylval->inte=0;return TK_INTE;

 /* yes/no */
Yes DEBUG_PRINTF("Found Yes\n");yylval->inte=1;return TK_INTE;
No DEBUG_PRINTF("Found No\n");yylval->inte=0;return TK_INTE;

 /* recognizing number */
{SCI_DOUBLE}|{DOUBLE} DEBUG_PRINTF("Found Double: %s\n",yytext);sscanf(yytext,"%lg",&yylval->real);return TK_REAL;
{INT} DEBUG_PRINTF("Found Integer: %s\n",yytext);sscanf(yytext,"%d",&yylval->inte);return TK_INTE;

{QUOTE}[^\"\']*{QUOTE} yylval->text=new std::string(yytext,1,strlen(yytext)-2);DEBUG_PRINTF("found string \"%s\", length=%d, copied: \"%s\"\n",yytext,(int)strlen(yytext),yylval->text->c_str()); return TK_QUOTED_TEXT;

 /* crash if finds unexpected word or unrecognized char */
{LETTER}{ALNUM}* printf("Found invalid string \"%s\"\n",yytext);return TK_INVALID_STRING;
{ANY} printf("Found invalid character \'%c\'\n",yytext[0]);return TK_INVALID_CHAR;

%%

//initializator
/* driver_t::driver_t(const string &path) : */
/*                        fin(path) */
/* { */
/*     using namespace glb; */
/*     if(not fin.good()) CRASH("Opening %s",path.c_str()); */
/*     init_scanner(); */
/* } */

//initialize the scanner
void scan::init_scanner()
{
    yylex_init(&scan::scanner);
}

//destroy the scanner
void scan::destroy_scanner()
{
    yylex_destroy(scan::scanner);
}

//parse everything
void parse()
{
    parser_parse(nullptr);
}
